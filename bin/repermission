#!/usr/bin/env stack
{- stack
  --resolver lts-7.0
  --install-ghc
  runghc
  --package aeson
  --package gh-pocket-knife
  --package load-env
  -- -Wall -Werror
-}
{-# LANGUAGE OverloadedStrings #-}

module Main (main) where

import Control.Monad
import Data.Aeson
import GH
import LoadEnv

data Permission
    = Admin
    | Push
    | Pull
    | None -- ^ Should never actually happen
    deriving Eq

instance FromJSON Permission where
    parseJSON = withObject "Permission" $ \o -> fromTriad
        <$> o .: "admin"
        <*> o .: "push"
        <*> o .: "pull"
      where
        fromTriad True _ _ = Admin
        fromTriad _ True _ = Push
        fromTriad _ _ True = Pull
        fromTriad _ _ _ = None

instance ToJSON Permission where
    toJSON Admin = String "admin"
    toJSON Push = String "push"
    toJSON Pull = String "pull"
    toJSON None = String "none"

data Collaborator = Collaborator
    { coUsername :: String
    , coPermission :: Permission
    }

instance FromJSON Collaborator where
    parseJSON = withObject "Collaborator" $ \o -> Collaborator
        <$> o .: "login"
        <*> o .: "permissions"

instance ToJSON Collaborator where
    toJSON c = object ["permission" .= coPermission c]

main :: IO ()
main = do
    loadEnv

    getEach_ "/repos/thoughtbot/maybe_haskell/collaborators" $ \c -> do
        when (coPermission c == Push) $ do
            putStrLn $ "updating " ++ coUsername c ++ " to permission:pull..."
            put ("/repos/thoughtbot/maybe_haskell/collaborators/" ++ coUsername c) $ c { coPermission = Pull }

-- vim: ft=haskell
